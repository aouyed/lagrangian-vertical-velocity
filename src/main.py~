
import xarray as xr
import matplotlib.pyplot as plt
from scipy.interpolate import RegularGridInterpolator as rgi
import numpy as np
import metpy.calc
from metpy.units import units

def drop_nan(frame):
    #row_mean = np.nanmean(frame, axis=1)
    #inds = np.where(np.isnan(frame))
    #frame[inds] = np.take(row_mean, inds[0])
    frame=np.astype(np.float32)
    mask = np.ma.masked_invalid(frame)
    mask = np.uint8(mask.mask)
    frame = np.nan_to_num(frame)
    frame = cv2.inpaint(frame, mask, inpaintRadius=10, flags=cv2.INPAINT_NS)
    print('inpainted')
    return frame

def preprocessing():
    ds_m=xr.open_dataset('../data/GEOS.fp.fcst.inst3_3d_asm_Np.20201104_18+20201104_1800.V01.nc4')
    ds_s=xr.open_dataset('../data/G16V04.0.ACTIV.2020309.1801.PX.02K.NC')
    ds_s0=xr.open_dataset('../data/G16V04.0.ACTIV.2020309.1731.PX.02K.NC')
    ds_s['cloud_top_height_0']=ds_s0['cloud_top_height'].copy()
    ds_m_unit=ds_m.drop('time')
    frame=ds_s['cloud_top_height'].values()
    frame0=ds_s0['cloud_top_height'].values()
    
    breakpoint()
    
def interpolation(): 
    v_function=rgi(points=(1000-ds_m_unit['lev'].values, ds_m_unit['lat'].values, ds_m_unit['lon'].values),values= np.squeeze(ds_m_unit['V'].values),bounds_error=False, fill_value=np.nan)
    u_function=rgi(points=(1000-ds_m_unit['lev'].values, ds_m_unit['lat'].values, ds_m_unit['lon'].values),values= np.squeeze(ds_m_unit['U'].values),bounds_error=False, fill_value=np.nan)
    t_function=rgi(points=(1000-ds_m_unit['lev'].values, ds_m_unit['lat'].values, ds_m_unit['lon'].values),values= np.squeeze(ds_m_unit['T'].values),bounds_error=False, fill_value=np.nan)
    omega_function=rgi(points=(1000-ds_m_unit['lev'].values, ds_m_unit['lat'].values, ds_m_unit['lon'].values),values= np.squeeze(ds_m_unit['OMEGA'].values),bounds_error=False, fill_value=np.nan)

    df=ds_s[['cloud_top_pressure','cloud_top_height','cloud_top_height_0']].to_dataframe().reset_index()
    df['cloud_top_pressure']=1000-df['cloud_top_pressure']
    df['cloud_top_height']=1000*df['cloud_top_height']
    df['cloud_top_height_0']=1000*df['cloud_top_height_0']
    print(df['cloud_top_pressure'].max())
    df['u']=u_function(df[['cloud_top_pressure','latitude', 'longitude']].values)
    df['v']=v_function(df[['cloud_top_pressure','latitude', 'longitude']].values)
    df['omega']=omega_function(df[['cloud_top_pressure','latitude', 'longitude']].values)
    df['t']=t_function(df[['cloud_top_pressure','latitude', 'longitude']].values)

    omega=df['omega'].to_numpy()*units('Pa/s')
    pressure=df['cloud_top_pressure'].to_numpy()*units('hPa')
    t=df['t'].to_numpy()*units('K')
    df['w']=metpy.calc.vertical_velocity(omega, pressure, t )

    df['cloud_top_pressure']=-df['cloud_top_pressure']+1000
    df=df.set_index(['image_x', 'image_y'])
    ds_inter=xr.Dataset.from_dataframe(df)
    return ds_inter
    
def main():
    preprocessing()
if __name__ == '__main__':
    main()
